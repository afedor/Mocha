diff --git a/Mocha/Invocation/MOFunctionInvocation.m b/Mocha/Invocation/MOFunctionInvocation.m
index 18214c2..e98839a 100644
--- a/Mocha/Invocation/MOFunctionInvocation.m
+++ b/Mocha/Invocation/MOFunctionInvocation.m
@@ -27,6 +27,19 @@
 #import <dlfcn.h>
 #import <ffi/ffi.h>
 
+@interface NSMethodSignature (Mocha)
+- (NSString *)typeEncoding;
+@end
+@implementation NSMethodSignature (Mocha)
+- (NSString *)typeEncoding {
+  NSString *encoding = [NSString stringWithFormat: @"%s", [self methodReturnType]];
+  for (NSUInteger i = 0;i < [self numberOfArguments];++i) {
+    const char *argType = [self getArgumentTypeAtIndex:i];
+    encoding = [encoding stringByAppendingFormat: @"%s", argType];
+  }
+  return encoding;
+}
+@end
 
 void * MOGetObjCCallAddressForArguments(NSArray *arguments);
 const char * MOBlockGetTypeEncoding(id blockObj);
@@ -91,6 +104,7 @@ JSValueRef MOFunctionInvoke(id function, JSContextRef ctx, size_t argumentCount,
         }
         
         Method method = NULL;
+        IMP method_imp = NULL;
         BOOL classMethod = (target == klass);
         
         // Determine the method type
@@ -99,11 +113,14 @@ JSValueRef MOFunctionInvoke(id function, JSContextRef ctx, size_t argumentCount,
         }
         else {
             method = class_getInstanceMethod(klass, selector);
+            /* For dynamic properties from CoreData, method will be NULL, but we can still get the method_imp and the methodSignature from the object */
+            method_imp = [target methodForSelector: selector];
+        
         }
         
         variadic = [function isVariadic];
         
-        if (method == NULL) {
+        if (method == NULL && method_imp == NULL) {
             NSException *e = [NSException exceptionWithName:MORuntimeException reason:[NSString stringWithFormat:@"Unable to locate method %@ of class %@", NSStringFromSelector(selector), klass] userInfo:nil];
             if (exception != NULL) {
                 *exception = [runtime JSValueForObject:e inContext:ctx];
@@ -111,7 +128,11 @@ JSValueRef MOFunctionInvoke(id function, JSContextRef ctx, size_t argumentCount,
             return NULL;
         }
         
-        const char *encoding = method_getTypeEncoding(method);
+        const char *encoding;
+        if (method)
+            encoding = method_getTypeEncoding(method);
+        else
+            encoding = [[[target methodSignatureForSelector: selector] typeEncoding] cStringUsingEncoding: NSASCIIStringEncoding];
         argumentEncodings = [[MOFunctionArgument argumentsFromTypeSignature:[NSString stringWithCString:encoding encoding:NSUTF8StringEncoding]] mutableCopy];
         
         if (argumentEncodings == nil) {
